import tkinter as tk
from tkinter import filedialog
from PIL import Image, ImageTk, ImageDraw
import cv2
import webcolors

def cargar_imagen(root):
    root.withdraw()
    filename = filedialog.askopenfilename(title="Seleccionar imagen")
    root.deiconify()
    if not filename:
        raise FileNotFoundError("No se seleccionó ninguna imagen.")
    imagen_bgr = cv2.imread(filename)
    imagen_rgb = cv2.cvtColor(imagen_bgr, cv2.COLOR_BGR2RGB)
    return imagen_rgb, filename
def encontrar_nombre_color(rgb):
    try:
        closest_name = actual_name = webcolors.rgb_to_name(rgb)
    except ValueError:
        distances = {}
        for name in webcolors.CSS3_NAMES_TO_HEX:
            r_c, g_c, b_c = webcolors.name_to_rgb(name)
            rd = (r_c - rgb[0]) ** 2
            gd = (g_c - rgb[1]) ** 2
            bd = (b_c - rgb[2]) ** 2
            distances[name] = rd + gd + bd
        closest_name = min(distances, key=distances.get)
        actual_name = None
    return actual_name if actual_name else f"Closest: {closest_name}"

def get_color(event):
    global img, tk_image, puntos_marcados

    x, y = event.x, event.y
    if 0 <= x < img.width and 0 <= y < img.height:
        color = img.getpixel((x, y))
        name_text = encontrar_nombre_color(color)

        # Crear copia de imagen base y dibujar puntos marcados anteriores
        img_copy = img.copy()
        draw = ImageDraw.Draw(img_copy)
        for px, py, text in puntos_marcados:
            draw.ellipse((px - 5, py - 5, px + 5, py + 5), outline="white", width=2)
            draw.text((px + 10, py - 10), text, fill="white")

        # Dibujar el punto actual (no permanente)
        draw.ellipse((x - 5, y - 5, x + 5, y + 5), outline="yellow", width=2)
        draw.text((x + 10, y - 10), name_text, fill="yellow")

        tk_image = ImageTk.PhotoImage(img_copy)
        label.config(image=tk_image)
        color_label.config(text=f"RGB({x}, {y}) = {color} → {name_text}")

def marcar_color(event):
    global puntos_marcados
    x, y = event.x, event.y
    if 0 <= x < img.width and 0 <= y < img.height:
        color = img.getpixel((x, y))
        name_text = encontrar_nombre_color(color)
        puntos_marcados.append((x, y, name_text))

# Inicialización
root = tk.Tk()
root.title("Color bajo el cursor (con marcadores permanentes)")

cv_img, path = cargar_imagen(root)
img = Image.fromarray(cv_img)
tk_image = ImageTk.PhotoImage(img)
puntos_marcados = []  # Lista de puntos marcados

label = tk.Label(root, image=tk_image)
label.pack()

color_label = tk.Label(root, text="Mueve el cursor o haz clic para marcar un color")
color_label.pack()

label.bind("<Motion>", get_color)
label.bind("<Button-1>", marcar_color)  # Clic izquierdo para marcar color

root.mainloop()
